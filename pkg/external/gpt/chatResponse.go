package gpt

import (
	"github.com/American-Made-Code/herd/pkg/external/gptExample"
	"github.com/American-Made-Code/herd/pkg/external/openAi"
)

// A list of chat completion choices. Can be more
// than one if n is greater than 1.
type chatResponseChoice struct {
	// The reason the model stopped generating tokens.
	// This will be stop if the model hit a natural stop
	// point or a provided stop sequence, length if the
	// maximum number of tokens specified in the request
	// was reached, content_filter if content was omitted
	// due to a flag from our content filters, tool_calls
	// if the model called a tool, or function_call (deprecated)
	// if the model called a function.
	Finish_reason string `json:"finish_reason"`
	// The Index of the choice in the list of choices.
	Index int `json:"index"`
	// A chat completion Message generated by the model.
	Message Message `json:"message"`
}

func (model chatResponseChoice) fromOpenAiSchema(schema *openAi.ChatCompletionChoice) chatResponseChoice {
	model = chatResponseChoice{
		Finish_reason: schema.Finish_reason,
		Index:         schema.Index,
		Message:       Message{}.fromOpenAiSchema(&schema.Message),
	}

	return model
}

func (model chatResponseChoice) fromExampleSchema(schema *gptExample.ChatCompletionChoice) chatResponseChoice {
	model = chatResponseChoice{
		Finish_reason: schema.Finish_reason,
		Index:         schema.Index,
		Message:       Message{}.fromExampleSchema(&schema.Message),
	}

	return model
}

// Represents a chat completion response returned by
// model, based on the provided input.
// (https://platform.openai.com/docs/api-reference/chat/object)
type ChatResponse struct {
	// A unique identifier for the chat completion.
	ID string `json:"id"`
	//	A list of chat completion Choices. Can be more than one if n is greater than 1.
	Choices []chatResponseChoice `json:"choices"`
	// The Unix timestamp (in seconds) of when the chat completion was Created.
	Created int `json:"created"`
	// The Model used for the chat completion.
	Model string `json:"model"`
	// Number of tokens in the generated completion.
	Completion_tokens int `json:"completion_tokens"`
	// Number of tokens in the prompt.
	Prompt_tokens int `json:"prompt_tokens"`
	// Total number of tokens used in the request (prompt + completion).
	Total_tokens int `json:"total_tokens"`
}

func (model ChatResponse) fromOpenAiSchema(schema *openAi.ChatCompletion) ChatResponse {
	var choices []chatResponseChoice

	// Transform the schema choices into the model choices
	for _, schemaChoice := range schema.Choices {
		choice := chatResponseChoice{}.fromOpenAiSchema(&schemaChoice)
		choices = append(choices, choice)
	}

	model = ChatResponse{
		ID:                schema.ID,
		Choices:           choices,
		Created:           schema.Created,
		Model:             schema.Model,
		Completion_tokens: schema.Usage.Completion_tokens,
		Prompt_tokens:     schema.Usage.Prompt_tokens,
		Total_tokens:      schema.Usage.Total_tokens,
	}

	return model
}

func (model ChatResponse) fromExampleSchema(schema *gptExample.ChatCompletion) ChatResponse {
	var choices []chatResponseChoice

	// Transform the schema choices into the model choices
	for _, schemaChoice := range schema.Choices {
		choice := chatResponseChoice{}.fromExampleSchema(&schemaChoice)
		choices = append(choices, choice)
	}

	model = ChatResponse{
		ID:                schema.ID,
		Choices:           choices,
		Created:           schema.Created,
		Model:             schema.Model,
		Completion_tokens: schema.Usage.Completion_tokens,
		Prompt_tokens:     schema.Usage.Prompt_tokens,
		Total_tokens:      schema.Usage.Total_tokens,
	}

	return model
}
